void display_distance(double distance);


// Port A updated for UART

void PORTA_INIT() //Port A initialization
{
    SYSCTL_RCGCGPIO_R |= 0x00000001;
    while((SYSCTL_PRGPIO_R&0x00000001)==0){};
    GPIO_PORTA_LOCK_R =0x4C4F434B;
    GPIO_PORTA_CR_R = 0xE3;
    GPIO_PORTA_DEN_R = 0xE3;
    GPIO_PORTA_DIR_R = 0xE0;
    GPIO_PORTA_AFSEL_R= 0x03;
    GPIO_PORTA_AMSEL_R=0x00;
    GPIO_PORTA_PCTL_R= 0x00000011;
    UART0_CTL_R &= ~ UART_CTL_UARTEN;
    UART0_IBRD_R = 104;
    UART0_FBRD_R = 11;
    UART0_LCRH_R = (UART_LCRH_WLEN_8 | UART_LCRH_FEN);
    UART0_CTL_R |= (UART_CTL_RXE | UART_CTL_TXE | UART_CTL_UARTEN);
}


//Port D updates
void PORTD_INIT_UART()
{
    SYSCTL_RCGCUART_R |= 0x00000004;
    SYSCTL_RCGCGPIO_R |= 0x00000008;
    GPIO_PORTD_LOCK_R=0x4C4F434B;
    GPIO_PORTD_CR_R = 0xC0;
    GPIO_PORTD_DIR_R = 0x00;
    GPIO_PORTD_DEN_R = 0xC0;
    GPIO_PORTD_AFSEL_R= 0xC0;
    GPIO_PORTD_AMSEL_R= 0x00;
    GPIO_PORTD_PCTL_R= 0x11000000;
    UART2_CTL_R = 0x0000;
    UART2_IBRD_R = 104;
    UART2_FBRD_R = 11;
    UART2_LCRH_R = 0x0070;
    UART2_CTL_R = 0x001;
}
void display_distance(double distance)
     {

       int digit;
         int i ;

         for(i=0; i<3; i++)
      {
         digit =(int)distance%10;
         digit+=48; //to convert from ASCII into the real number
         LCD_command(0x80+(13-i));
         LCD_data(digit);
         distance/=10;
      }

     }
     void gps(){


    double long1;
    double lat1;
    // double Rlat;
    // double Rlong;
    double res1;
    double res2;

    char* ID;
    char* Time;
    char* Long1;
    char* direction;
    char* Lat1;
    char Parsing[200];
    char GPGGA[50];
    int i;
    int j=0;
    int y;


    for(i=0;i<150;i++){
        while ((UART2_FR_R & 0x10) != 0) {}
        Parsing[i] = UART2_DR_R;
        if(Parsing[i]=='A'&& Parsing[i-1] =='G'){
            //check for gpgga line and takes i of "A" in j
            j=i;

        }
    }
for(y=0;y<100;y++){
        GPGGA[y] = Parsing[j++];
    }

  

        double longitude1 = atof(Long1);
        res1 = (int)(longitude1 / 100);
        res2 = longitude1 - (res1 * 100);
        latRes = res1 + (res2 / 60);
       //display_distance(LatitudeRsult);

        double latitude1 = atof(Lat1);
        res1 = (int)(latitude1 / 100);
        res2 = latitude1 - (res1 * 100);
        longRes = res1 + (res2 / 60);

        display_distance(longRes);}
}


